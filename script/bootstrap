#!/bin/bash
# Make sure all our local dependencies are available.

function set_os_specific {
  # RedHat
  which yum && { 
    PKG_MANAGER='yum'
    PKG_INSTALL="$PKG_MANAGER install -y"
    PKG_QUERY="rpm -qa"
    PKG_QUERY_INSTALLED="$PKG_QUERY | grep "
    PKG_QUERY_VERIFY="wc -l"
    PKG_UPDATE="$PKG_MANAGER update -y"
    PKG_LIST="gcc git gnome-keyring libxml2 libxml2-devel libxslt libxslt-devel ruby ruby-devel rubygem-nokogiri"
    # TODO: Find a better way to get nokogiri installed?
    export NOKOGIRI_USE_SYSTEM_LIBRARIES=1
    return
  }
  # TODO: Add support for zypper
  which zypper && {
    PKG_MANAGER='zypper'
    return
  }
  # TODO: Add support for pacman
  which pacman && {
    PKG_MANAGER='pacman'
    return
  }
  which apt-get && {
    PKG_MANAGER='apt-get'
    PKG_INSTALL="$PKG_MANAGER install -y"
    PKG_QUERY="dpkg-query"
    PKG_QUERY_INSTALLED="$PKG_QUERY -W --showformat='${Status}\n'"
    PKG_QUERY_VERIFY="grep 'install ok installed'"
    PKG_UPDATE="$PKG_MANAGER update -y"
    PKG_LIST="git-core ruby-dev"
    return
  }
  # TODO: Add support for homebrew?
  which homebrew && {
    echo "Doing nothing - homebrew"
    return
  }
  echo "Couldn't find package manager"
  exit
}

OS_TYPE="$(uname -s)"
set_os_specific
set -e

# On Linux, 
# install absolutely necessary Boxen dependencies (git and ruby)
if [[ "$OS_TYPE" =~ 'Linux' ]]; then
  PKGS=""
  for PKG in $PKG_LIST
  do
    PKGS+=$([[ "" == $($PKG_QUERY_INSTALLED $PKG | $PKG_QUERY_VERIFY) ]] && echo "$PKG " || echo "")
  done
  if [[ "$PKGS" != "" ]]; then
    /usr/bin/sudo -E -p "Need to install absolutely necessary Boxen dependencies ($PKGS), password for sudo: " \
    $PKG_UPDATE
    # probably don't need the second prompt, but what the hell
    /usr/bin/sudo -E -p "Need to install absolutely necessary Boxen dependencies ($PKGS), password for sudo: " \
    $PKG_INSTALL $PKGS
  fi
fi

# FIX: only sudo if gem home isn't writable
(/usr/bin/gem list -i bundler -v '~> 1.5.3' > /dev/null) || {
  /usr/bin/sudo -E -p "Need to install Bundler for system ruby, password for sudo: " \
  /usr/bin/gem install bundler -v '~> 1.5.3' --no-rdoc --no-ri
}

# We don't want old config hanging around.

rm -rf .bundle/config
rm -rf .librarian/puppet/config

# Skip a bunch of things if we aren't on OSX
if [[ "$OS_TYPE" =~ 'Darwin' ]]; then
  # Put xcrun shim on PATH if on MoLo
  set +e
  OSX_VERSION_CHECK=`sw_vers | grep ProductVersion | cut -f 2 -d ':'  | egrep '10\.8'`
  if [ $? -eq 0 ]; then
    export PATH=$(pwd)/vendor/shims:$PATH
  fi
  set -e

  CLT_VERSION=`pkgutil --pkg-info=com.apple.pkg.CLTools_Executables | grep version | cut -f 2 -d ' ' | awk ' { print $1; } '`

  # Bundle install unless we're already up to date.
  if [[ $CLT_VERSION =~ ^5\.1\.0\.0\.1\.1396320587 ]]; then
    # Fix for LLVM that ships with Xcode 5.1
    ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future /usr/bin/bundle install --binstubs bin --path .bundle --quiet "$@"
  else
    /usr/bin/bundle install --binstubs bin --path .bundle --quiet "$@"
  fi
else
  if [ -e /usr/bin/bundle ]; then
    /usr/bin/bundle install --binstubs bin --path .bundle --quiet "$@"
  else
    #TODO: make this more flexible. for now, if a user doesn't have bundle on either path then at least an error will be raised
    /usr/local/bin/bundle install --binstubs bin --path .bundle --quiet "$@"
  fi
fi

# Fix the binstubs to use system ruby
if [ -e /usr/bin/sed ]; then
  find bin -not -path 'bin/\.*' -type f -print0 | xargs -0 /usr/bin/sed -i 's|/usr/bin/env ruby|/usr/bin/ruby|g'
else
  find bin -not -path 'bin/\.*' -type f -print0 | xargs -0 -I % /bin/sed -i 's|/usr/bin/env ruby|/usr/bin/ruby|g' %
fi
